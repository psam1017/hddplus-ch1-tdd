요구사항 정리

테스트 케이스의 작성 및 작성 이유를 주석으로 작성한다.
프로젝트 내 주석 참고 필요한 기능 작성한다.
분산 환경은 고려하지 않는다.

PATCH /point/{id}/charge
PATCH /point/{id}/use
GET /point/{id}
GET /point/{id}/histories
잔고가 부족하면 포인트 사용은 실패해야 한다.
동시에 여러 건의 포인트 요청이 들어올 경우 순차적으로 처리할 수 있다.
동시에 여러 건의 이용 요청이 들어올 경우 순차적으로 처리되어야 한다.

Default
- point 패키지에서 PointService 기능 작성한다.
- database 패키지의 구현체는 수정하지 않고 이를 활용한다.
- 각 기능에 대한 단위 테스트를 작성한다.
- 4가지 엔드포인트 기능을 구현한다.

Step 1
- 포인트 충전, 사용에 대한 정책을 추가한다.
  - 잔고가 부족한 경우 정책
  - 잔고 최대치에 대한 정책
- 동시에 여러 요청이 들어와도 순서대로 제어될 수 있도록 리팩토링한다. 또는 한 번에 하나의 요청씩만 제어될 수 있도록 리팩토링한다.
- 동시성 제어에 대한 통합 테스트를 작성한다.

Step 2
- 동시성 제어 방식에 대해 분석하고 보고서를 작성한다.

==================================================

실행계획

프로젝트를 살펴보면서 기능을 숙지한다. 모르는 기능이 있으면 바로 학습하고 메모로 남긴다.
```
동시성 제어에 대해 생각하면서 코드를 살펴보니 database 패키지 아래의 테이블들에 난수로 시간지연을 하는 throttle 함수가 존재하는 게 보인다.
아마도, 실제 환경에서도 이러한 connection 에 의한 지연이 발생할 수 있음을 가정하기 위한 제약조건처럼 보인다. 그리고 이 클래스들은 변경을 하면 안 되기 때문에 시간지연과 상관없이 순차적으로 데이터가 보장되도록 해야만 한다.
이러니까 좀 재밌네. 평소에는 @Transactional 에서 isolation 을 통해 대부분 제어를 하니까 괜찮았는데 이번에는 이걸 직접 구현을 해본다고 이해하면 될 것 같다.
```

TO-DO 를 남겨서 작업할 코드를 표시한다.
```
TO-DO 가 이미 controller 에 필요한 만큼은 있어서 바로 테스트코드를 짜면서 구현해보면 될 듯 하다.
근데 DTO 로 반환하지 않아도 되는 건가? 도메인을 직접 반환하는 것 같은데...일단 그대로 가보자.
```

Default 수준의 테스트 케이스를 작성한다. 필요한 객체가 있으면 바로 생성한다.

테스트에 실패하고 나면 기능을 내용을 구현 시작한다.

포인트 충전에 대한 정책을 추가하고 테스트 및 구현한다.

동시성 제어가 필요한 이유에 대해 생각해본다. 포인트 충전과 사용인데, 커밋, 롤백, 락 등이 없으면 acid 가 깨지겠지. 그럼 이걸 제어하기 위해서 어떡하지?

동시성 제어를 테스트할 수 있는 통합 테스트 코드를 작성해본다.
동시성 제어를 구현한 이후 통합 테스트를 통과한다.

```
동시성 제어를 테스트한다는 게 쉬운 일은 아닌 것 같다.
의도적으로 첫 번째 요청이 두 번째 요청보다 더 지연되는 상황을 구현하기 위해 Thread 객체를 생성하고 Thread.sleep 메서드를 사용해서, 테스트를 통과는 했지만 아래와 같은 문제점이 생겼다.

1. 테스트에 불필요한 지연을 의도적으로 발생시켜야 한다.
2. JVM 의 자원 제어 방식에 따라 테스트 결과가 달라질 수 있다. 예를 들어, 더 늦게 수행되어야 하는 Thread 가 먼저 수행될 수 있다.

생각해보면, 결국 지연이라는 현상 자체는 단위 테스트가 아니라 통합 테스트 대상이기도 하고 build 를 위한 test 수행 과정에서도 좋지 않으니 한 번 K6 로 테스트를 수행하고 검증해보려고 한다.
```

동시성 제어 방식에 대한 분석과 보고서를 작성한다.
