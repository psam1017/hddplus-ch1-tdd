요구사항 정리

테스트 케이스의 작성 및 작성 이유를 주석으로 작성한다.
프로젝트 내 주석 참고 필요한 기능 작성한다.
분산 환경은 고려하지 않는다.

PATCH /point/{id}/charge
PATCH /point/{id}/use
GET /point/{id}
GET /point/{id}/histories
잔고가 부족하면 포인트 사용은 실패해야 한다.
동시에 여러 건의 포인트 요청이 들어올 경우 순차적으로 처리할 수 있다.
동시에 여러 건의 이용 요청이 들어올 경우 순차적으로 처리되어야 한다.

Default
- point 패키지에서 PointService 기능 작성한다.
- database 패키지의 구현체는 수정하지 않고 이를 활용한다.
- 각 기능에 대한 단위 테스트를 작성한다.
- 4가지 엔드포인트 기능을 구현한다.

Step 1
- 포인트 충전, 사용에 대한 정책을 추가한다.
  - 잔고가 부족한 경우 정책
  - 잔고 최대치에 대한 정책
- 동시에 여러 요청이 들어와도 순서대로 제어될 수 있도록 리팩토링한다. 또는 한 번에 하나의 요청씩만 제어될 수 있도록 리팩토링한다.
- 동시성 제어에 대한 통합 테스트를 작성한다.

Step 2
- 동시성 제어 방식에 대해 분석하고 보고서를 작성한다.

==================================================

실행계획

프로젝트를 살펴보면서 기능을 숙지한다. 모르는 기능이 있으면 바로 학습하고 메모로 남긴다.

TO-DO 를 남겨서 작업할 코드를 표시한다.

Default 수준의 테스트 케이스를 작성한다. 필요한 객체가 있으면 바로 생성한다.

테스트에 실패하고 나면 기능을 내용을 구현 시작한다.

포인트 충전에 대한 정책을 추가하고 테스트 및 구현한다.

동시성 제어가 필요한 이유에 대해 생각해본다. 포인트 충전과 사용인데, 커밋, 롤백, 락 등이 없으면 acid 가 깨지겠지. 그럼 이걸 제어하기 위해서 어떡하자?

동시성 제어를 구현한 이후 통합 테스트를 작성해본다.

동시성 제어 방식에 대한 분석과 보고서를 작성한다.